package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BaseDBRepository<T> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    private PreparedStatement makePreparedStatement(String sqlToExecute, Object[] params, int autoGeneratedKeys) throws SQLException {
        PreparedStatement statement = DATA_SOURCE.getConnection().prepareStatement(sqlToExecute, autoGeneratedKeys);

        if (params != null) {
            for (int i = 0; i < params.length; i++)
                statement.setObject(i + 1, params[i]);
        }

        return statement;
    }

    protected long executeAdd(String sqlToExecute, Object[] params) {
        try (PreparedStatement statement = makePreparedStatement(sqlToExecute, params, Statement.RETURN_GENERATED_KEYS)) {
            if (statement.executeUpdate() != 1) {
                throw new RepositoryException("Can't executeUpdate.");
            } else {
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    return generatedKeys.getLong(1);
                } else {
                    throw new RepositoryException("Can't executeUpdate [no autogenerated fields].");
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't executeOneResult.", e);
        }
    }

    protected void executeUpdate(String sqlToExecute, Object[] params) {
        try (PreparedStatement statement = makePreparedStatement(sqlToExecute, params, Statement.NO_GENERATED_KEYS)) {
            if (statement.executeUpdate() != 1) {
                throw new RepositoryException("Can't executeUpdate.");
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't executeOneResult.", e);
        }
    }


    protected T executeOneResult(String sqlToExecute, Object[] params, DomainCreator<T> creator) {
        List<T> result;

        try {
            result = executeManyResult(sqlToExecute, params, creator);
        } catch (RepositoryException e) {
            throw new RepositoryException("Can't executeOneResult.", e.getCause());
        }

        if (result.size() != 1)
            throw new RepositoryException("Can't executeOneResult.");

        return result.get(0);
    }

    protected List<T> executeManyResult(String sqlToExecute, Object[] params, DomainCreator<T> creator) {
        List<T> result = new ArrayList<>();

        try (PreparedStatement statement = makePreparedStatement(sqlToExecute, params, Statement.NO_GENERATED_KEYS)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                T instance;
                while ((instance = creator.create(statement.getMetaData(), resultSet)) != null) {
                    result.add(instance);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't executeManyResult.", e);
        }
        return result;
    }

    @FunctionalInterface
    public interface DomainCreator<T> {
        T create(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;
    }
}
